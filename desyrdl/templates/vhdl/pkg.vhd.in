-------------------------------------------------------------------------------
--          ____  _____________  __                                          --
--         / __ \/ ____/ ___/\ \/ /                 _   _   _                --
--        / / / / __/  \__ \  \  /                 / \ / \ / \               --
--       / /_/ / /___ ___/ /  / /               = ( M | S | K )=             --
--      /_____/_____//____/  /_/                   \_/ \_/ \_/               --
--                                                                           --
-------------------------------------------------------------------------------
--! @copyright  (c) 2021 DESY
--! @license    SPDX-License-Identifier: Apache-2.0
-------------------------------------------------------------------------------
--! @file pkg_{node.type_name}.vhd
--! @brief package of DesyRdl for address space decoder for {node.type_name}
-------------------------------------------------------------------------------
--! @author Michael BÃ¼chler <michael.buechler@desy.de>
--! @author Lukasz Butkowski <lukasz.butkowski@desy.de>
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library desyrdl;
use desyrdl.common.all;

-- library desy;
-- use desy.common_axi.all;

package pkg_{node.type_name} is

  -----------------------------------------------
  -- per addrmap / module
  -----------------------------------------------
  constant C_ADDR_WIDTH : integer := 32;
  constant C_DATA_WIDTH : integer := 32;

  -- ===========================================================================
  -- ---------------------------------------------------------------------------
  -- registers
  -- ---------------------------------------------------------------------------
  -- always add +1 for the dummy
  constant C_REGTYPES_COUNT : integer := {n_regtypes};
  constant C_REGITEMS_COUNT : integer := {n_regitems};
  constant C_REGCOUNT_TOTAL : integer := {n_regcount};

  -- registers type fields definition
  --{regtypes:repeat:
  constant C_{{name:upper}}_FIELDS : t_field_info_array(0 to 31) := ( --{{fields:repeat:
    {{{{i}}}} => (ftype => {{{{ftype}}}}, len => {{{{field.width}}}}, upper => {{{{field.high}}}}, lower => {{{{field.low}}}}, we => {{{{we}}}}, sw => C_{{{{sw:upper}}}}, hw => C_{{{{hw:upper}}}},  defval => {{{{reset}}}}, decrwidth => {{{{decrwidth}}}}, incrwidth => {{{{incrwidth}}}}), -- {{{{field.inst_name}}}} --}}
    others => C_FIELD_NONE
  );
  ----------}

  -- register items
  constant C_REGISTER_INFO : t_reg_info_array(0 to {n_regitems}) := ( --{regitems:repeat:
    {{i}} => (address => {{reladdr}}, fields => C_{{type:upper}}_FIELDS, dim_n => {{dim_n}}, dim_m => {{dim_m}}, elements => {{elements}}, index => {{index}}), --}
    others => C_REG_NONE
  );

  -- ---------------------------------------------------------------------------
  -- memoriers
  -- ---------------------------------------------------------------------------
  -- always add +1 for the dummy
  constant C_MEMITEMS_COUNT : integer := {n_memitems};

  constant C_MEM_INFO : t_mem_info_array(0 to {n_memitems}) := ( --{memitems:repeat:
    {{i}} => (address => {{reladdr}}, addrwidth => {{addrwidth}}, datawidth => {{datawidth}}, entries => {{entries}}, sw => C_{{sw:upper}}), --}
    others => C_MEM_NONE
  );

  -- ---------------------------------------------------------------------------
  -- external buses
  -- ---------------------------------------------------------------------------
  -- always add +1 for the dummy
  constant C_EXTITEMS_COUNT : integer := {n_extitems};

  constant C_EXT_INFO : t_ext_info_array(0 to {n_extitems}) := ( --{extitems:repeat:
    {{i}} => (address => {{reladdr}}, addrwidth => {{addrwidth}}, size => {{size}}), --}
    others => C_EXT_NONE
  );


  -- ===========================================================================
  -- REGISTERS interface
  -- ---------------------------------------------------------------------------
  -- TODO: in fields --{{{{context:if:eq:we:1: we : std_logic;--}}}}
  --{regtypes:repeat:
  -----------------------------------------------
  -- register type: {{regtype.type_name}}
  -----------------------------------------------
  --{{fields:repeat:
  type t_field_signals_{{{{regtype.type_name}}}}_{{{{field.type_name}}}}_in is record
    data : std_logic_vector({{{{width}}}}-1 downto 0);
    we   : std_logic;
    incr : std_logic;
    decr : std_logic;
  end record;
  type t_field_signals_{{{{regtype.type_name}}}}_{{{{field.type_name}}}}_out is record
    data : std_logic_vector({{{{width}}}}-1 downto 0);
    swacc : std_logic;
    swmod : std_logic;
  end record; --}}
  -- The actual register types
  type t_reg_{{regtype.type_name}}_in is record --{{fields:repeat:
    {{{{field.type_name}}}} : t_field_signals_{{{{regtype.type_name}}}}_{{{{field.type_name}}}}_in; --}}
  end record;
  type t_reg_{{regtype.type_name}}_out is record --{{fields:repeat:
    {{{{field.type_name}}}} : t_field_signals_{{{{regtype.type_name}}}}_{{{{field.type_name}}}}_out; --}}
  end record;
  type t_reg_{{regtype.type_name}}_2d_in is array (integer range <>) of t_reg_{{regtype.type_name}}_in;
  type t_reg_{{regtype.type_name}}_2d_out is array (integer range <>) of t_reg_{{regtype.type_name}}_out;
  type t_reg_{{regtype.type_name}}_3d_in is array (integer range <>, integer range <>) of t_reg_{{regtype.type_name}}_in;
  type t_reg_{{regtype.type_name}}_3d_out is array (integer range <>, integer range <>) of t_reg_{{regtype.type_name}}_out;
  ------------------------------}

  -- ===========================================================================
  -- MEMORIES interface
  -- ---------------------------------------------------------------------------
  --{memtypes:repeat:
  type tif_mem_{{mem.type_name}}_out is record
    en   : std_logic;
    we   : std_logic;
    addr : std_logic_vector({{addrwidth}}-1 downto 0);
    data : std_logic_vector({{datawidth}}-1 downto 0);
  end record tif_mem_{{mem.type_name}}_out;
  type tif_mem_{{mem.type_name}}_in is record
    data : std_logic_vector({{datawidth}}-1 downto 0);
  end record tif_mem_{{mem.type_name}}_in;
  --}

  -- ===========================================================================
  -- {node.type_name} : Top module address map interface
  -- ---------------------------------------------------------------------------
  type tif_addrmap_{node.type_name}_in is record
    --{regitems:repeat:{{context:if:eq:dim:1:
    {{{{reg.inst_name}}}} : t_reg_{{{{reg.type_name}}}}_in; --}}{{context:if:eq:dim:2:
    {{{{reg.inst_name}}}} : t_reg_{{{{reg.type_name}}}}_2d_in(0 to {{{{dim_m}}}}-1); --}}{{context:if:eq:dim:3:
    {{{{reg.inst_name}}}} : t_reg_{{{{reg.type_name}}}}_3d_in(0 to {{{{dim_n}}}}-1, 0 to {{{{dim_m}}}}-1); --}}}
    --{memitems:repeat:
    {{mem.inst_name}} : tif_mem_{{mem.type_name}}_in; --}
    --{extitems:repeat:
    {{ext.inst_name}} : tif_{{desyrdl_interface:lower}}_s2m; --}
  end record;

  type tif_addrmap_{node.type_name}_out is record
    --{regitems:repeat:{{context:if:eq:dim:1:
    {{{{reg.inst_name}}}} : t_reg_{{{{reg.type_name}}}}_out; --}}{{context:if:eq:dim:2:
    {{{{reg.inst_name}}}} : t_reg_{{{{reg.type_name}}}}_2d_out(0 to {{{{dim_m}}}}-1); --}}{{context:if:eq:dim:3:
    {{{{reg.inst_name}}}} : t_reg_{{{{reg.type_name}}}}_3d_out(0 to {{{{dim_n}}}}-1, 0 to {{{{dim_m}}}}-1); --}}}
    --{memitems:repeat:
    {{mem.inst_name}} : tif_mem_{{mem.type_name}}_out; --}
    --{extitems:repeat:
    {{ext.inst_name}} : tif_{{desyrdl_interface:lower}}_m2s; --}
  end record;

  -- ===========================================================================
  -- top level component declaration
  -- must come after defining the interfaces
  -- ---------------------------------------------------------------------------
  subtype tif_{node.type_name}_m2s is tif_{desyrdl_interface:lower}_m2s;
  subtype tif_{node.type_name}_s2m is tif_{desyrdl_interface:lower}_s2m;

  component {node.type_name} is
    port (
      pi_clock : in std_logic;
      pi_reset : in std_logic;

      -- TOP interface
      pifi_s_top : in  tif_{node.type_name}_m2s;
      pifo_s_top : out tif_{node.type_name}_s2m;
      -- pifi_s_top : in  tif_{desyrdl_interface:lower}_m2s;
      -- pifo_s_top : out tif_{desyrdl_interface:lower}_s2m;

      -- logic
      pifi_addrmap : in  tif_addrmap_{node.type_name}_in;
      pifo_addrmap : out tif_addrmap_{node.type_name}_out
    );
  end component {node.type_name};

end package pkg_{node.type_name};

package body pkg_{node.type_name} is

end package body;

--==============================================================================
--------------------------------------------------------------------------------

--{regtypes:repeat:---------------------------------------------
-- register type: {{regtype.type_name}}
-----------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library desyrdl;
use desyrdl.pkg_{node.type_name}.all;

entity {node.type_name}_{{regtype.type_name}} is
  port (
    pi_clock        : in  std_logic;
    pi_reset        : in  std_logic;
    -- to/from adapter
    pi_decoder_rd_stb : in  std_logic;
    pi_decoder_wr_stb : in  std_logic;
    pi_decoder_data   : in  std_logic_vector(C_DATA_WIDTH-1 downto 0);
    po_decoder_data   : out std_logic_vector(C_DATA_WIDTH-1 downto 0);

    pifi_reg  : in t_reg_{{regtype.type_name}}_in ;
    pifo_reg  : out t_reg_{{regtype.type_name}}_out
  );
end entity {node.type_name}_{{regtype.type_name}};

architecture rtl of {node.type_name}_{{regtype.type_name}} is
  signal data_out : std_logic_vector(C_DATA_WIDTH-1 downto 0) := (others => '0');
begin

  -- resize field data out to the register bus width
  -- do only if 1 field and signed{{context:if:eq:map_out:0:
  po_decoder_data <= data_out;}}{{context:if:eq:map_out:1:
  po_decoder_data <= data_out;}}{{context:if:eq:map_out:2:
  po_decoder_data <= std_logic_vector(resize(signed(data_out(C_{{regtype.type_name:upper}}_FIELDS(0).upper downto C_{{regtype.type_name:upper}}_FIELDS(0).lower)),C_DATA_WIDTH));--}}
  --{{fields:repeat:{{{{context:if:eq:ftype:STORAGE:
  {{{{{{{{name}}}}}}}}_storage : entity work.reg_field_storage
    generic map(
      g_info => C_{{name:upper}}_FIELDS({{{{{{{{i}}}}}}}})
    )
    port map (
      pi_clock     => pi_clock,
      pi_reset     => pi_reset,
      pi_sw_rd_stb => pi_decoder_rd_stb,
      pi_sw_wr_stb => pi_decoder_wr_stb,
      pi_sw_data   => pi_decoder_data({{{{{{{{field.high}}}}}}}} downto {{{{{{{{field.low}}}}}}}}),
      po_sw_data   => data_out({{{{{{{{field.high}}}}}}}} downto {{{{{{{{field.low}}}}}}}}),
      pi_hw_we     => pifi_reg.{{{{{{{{name}}}}}}}}.we,
      pi_hw_data   => pifi_reg.{{{{{{{{name}}}}}}}}.data({{{{{{{{field.width}}}}}}}}-1 downto 0),
      po_hw_data   => pifo_reg.{{{{{{{{name}}}}}}}}.data({{{{{{{{field.width}}}}}}}}-1 downto 0),
      po_hw_swmod  => pifo_reg.{{{{{{{{name}}}}}}}}.swmod,
      po_hw_swacc  => pifo_reg.{{{{{{{{name}}}}}}}}.swacc
    );--}}}}{{{{context:if:eq:ftype:WIRE:
  {{{{{{{{name}}}}}}}}_wire : block
    signal decoder_rd_stb_q : std_logic;
  begin
    hw_assign : if  {{{{{{{{const}}}}}}}} = 0 generate
      data_out({{{{{{{{field.high}}}}}}}} downto {{{{{{{{field.low}}}}}}}}) <= pifi_reg.{{{{{{{{name}}}}}}}}.data({{{{{{{{field.width}}}}}}}}-1 downto 0);
    end generate;
    const : if  {{{{{{{{const}}}}}}}} = 1 generate
      data_out({{{{{{{{field.high}}}}}}}} downto {{{{{{{{field.low}}}}}}}}) <= std_logic_vector(to_unsigned({{{{{{{{reset}}}}}}}},{{{{{{{{field.width}}}}}}}}));
    end generate;
    pifo_reg.{{{{{{{{name}}}}}}}}.data  <= data_out({{{{{{{{field.high}}}}}}}} downto {{{{{{{{field.low}}}}}}}});
    pifo_reg.{{{{{{{{name}}}}}}}}.swmod <= '0';
    pifo_reg.{{{{{{{{name}}}}}}}}.swacc <= '1' when pi_decoder_rd_stb = '1' and decoder_rd_stb_q = '0' else '0';
    decoder_rd_stb_q <= pi_decoder_rd_stb when rising_edge(pi_clock);
  end block;--}}}}
  --}}
end rtl;
--}



