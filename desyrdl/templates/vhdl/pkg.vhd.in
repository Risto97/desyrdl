------------------------------------------------------------------------------
--          ____  _____________  __                                         --
--         / __ \/ ____/ ___/\ \/ /                 _   _   _               --
--        / / / / __/  \__ \  \  /                 / \ / \ / \              --
--       / /_/ / /___ ___/ /  / /               = ( M | S | K )=            --
--      /_____/_____//____/  /_/                   \_/ \_/ \_/              --
--                                                                          --
------------------------------------------------------------------------------
--! @copyright Copyright 2021-2022 DESY
--! SPDX-License-Identifier: Apache-2.0
------------------------------------------------------------------------------
--! @date 2021-10-01
--! @author Michael BÃ¼chler <michael.buechler@desy.de>
--! @author Lukasz Butkowski <lukasz.butkowski@desy.de>
------------------------------------------------------------------------------
--! @brief
--! VHDL package of DesyRDL for address space decoder for {node.orig_type_name}
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library desyrdl;
use desyrdl.common.all;

-- library desy;
-- use desy.common_axi.all;

package pkg_{{type_name_org}} is

  -----------------------------------------------
  -- per addrmap / module
  -----------------------------------------------
  constant C_ADDR_WIDTH : integer := {{addrwidth}};
  constant C_DATA_WIDTH : integer := 32;

  -- ===========================================================================
  -- ---------------------------------------------------------------------------
  -- registers
  -- ---------------------------------------------------------------------------

  -- ===========================================================================
  -- REGISTERS interface
  -- ---------------------------------------------------------------------------{% for regtype in reg_types %}
  -- register type: {{regtype.type_name}}
  -----------------------------------------------{% for field in regtype.fields %}
  type t_field_signals_{{regtype.type_name}}_{{field.type_name}}_in is record
    data : std_logic_vector({{field.width}}-1 downto 0); --{% if field.we %}
    we   : std_logic; --{% endif %}{% if field.ftype == "COUNTER" %}
    incr : std_logic;
    decr : std_logic; --{% endif %}
  end record;
  type t_field_signals_{{regtype.type_name}}_{{field.type_name}}_out is record
    data : std_logic_vector({{field.width}}-1 downto 0);
    swacc : std_logic;
    swmod : std_logic;
  end record; --{% endfor %}
  -- The actual register types
  type t_reg_{{regtype.type_name}}_in is record--{% for field in regtype.fields %}
    {{field.type_name}} : t_field_signals_{{regtype.type_name}}_{{field.type_name}}_in;--{% endfor %}
  end record;
  type t_reg_{{regtype.type_name}}_out is record--{% for field in regtype.fields %}
    {{field.type_name}} : t_field_signals_{{regtype.type_name}}_{{field.type_name}}_out;--{% endfor %}
  end record;
  type t_reg_{{regtype.type_name}}_2d_in is array (integer range <>) of t_reg_{{regtype.type_name}}_in;
  type t_reg_{{regtype.type_name}}_2d_out is array (integer range <>) of t_reg_{{regtype.type_name}}_out;
  type t_reg_{{regtype.type_name}}_3d_in is array (integer range <>, integer range <>) of t_reg_{{regtype.type_name}}_in;
  type t_reg_{{regtype.type_name}}_3d_out is array (integer range <>, integer range <>) of t_reg_{{regtype.type_name}}_out;
  -----------------------------------------------{% endfor %}

  -- ===========================================================================
  -- REGFILE interface
  -- ---------------------------------------------------------------------------

  ------------------------------


  -- ===========================================================================
  -- MEMORIES interface
  -- ---------------------------------------------------------------------------{% for mem in mem_types %}
  -- memory type: {{mem.type_name}}
  -----------------------------------------------
  type t_mem_{{mem.type_name}}_out is record
    en   : std_logic;
    addr : std_logic_vector({{mem.addrwidth}}-1 downto 0);
    --{% if mem.node.is_sw_writable %}
    we   : std_logic;
    data : std_logic_vector({{mem.datawidth}}-1 downto 0);--{% endif %}
  end record t_mem_{{mem.type_name}}_out;
  type t_mem_{{mem.type_name}}_in is record
    data : std_logic_vector({{mem.datawidth}}-1 downto 0);
  end record t_mem_{{mem.type_name}}_in;
  type t_mem_{{mem.type_name}}_2d_in is array (integer range <>) of t_mem_{{mem.type_name}}_in;
  type t_mem_{{mem.type_name}}_2d_out is array (integer range <>) of t_mem_{{mem.type_name}}_out;
  -----------------------------------------------{% endfor %}

  -- ===========================================================================
  -- {{type_name_org}} : Top module address map interface
  -- ---------------------------------------------------------------------------
  type t_addrmap_{{type_name_org}}_in is record
    --{% for reg in reg_insts %}{% if reg.dim == 1 %}
    {{reg.inst_name}} : t_reg_{{reg.type_name}}_in;--{% elif reg.dim == 2 %}
    {{reg.inst_name}} : t_reg_{{reg.type_name}}_2d_in(0 to {{reg.dim_m}}-1);--{% elif reg.dim == 3 %}
    {{reg.inst_name}} : t_reg_{{reg.type_name}}_3d_in(0 to {{reg.dim_n}}-1, 0 to {{reg.dim_m}}-1);--{% endif %}{% endfor %}
    --{% for mem in mem_insts %}{% if mem.dim == 1 %}
    {{mem.inst_name}} : t_mem_{{mem.type_name}}_in;--{% elif mem.dim == 2 %}
    {{mem.inst_name}} : t_mem_{{mem.type_name}}_2d_in(0 to {{mem.dim_m}}-1);--{% endif %}{% endfor %}
    --{% for ext in ext_insts %}{% if ext.dim == 1 %}
    {{ext.inst_name}} : t_{{ext.interface|lower}}_s2m;--{% elif ext.dim == 2 %}
    {{ext.inst_name}} : t_{{ext.interface|lower}}_s2m_array;--{% endif %}{% endfor %}
  end record;

  type t_addrmap_{{type_name_org}}_out is record
    --{% for reg in reg_insts %}{% if reg.dim == 1 %}
    {{reg.inst_name}} : t_reg_{{reg.type_name}}_out;--{% elif reg.dim == 2 %}
    {{reg.inst_name}} : t_reg_{{reg.type_name}}_2d_out(0 to {{reg.dim_m}}-1);--{% elif reg.dim == 3 %}
    {{reg.inst_name}} : t_reg_{{reg.type_name}}_3d_out(0 to {{reg.dim_n}}-1, 0 to {{reg.dim_m}}-1);--{% endif %}{% endfor %}
    --{% for mem in mem_insts %}{% if mem.dim == 1 %}
    {{mem.inst_name}} : t_mem_{{mem.type_name}}_out;--{% elif mem.dim == 2 %}
    {{mem.inst_name}} : t_mem_{{mem.type_name}}_2d_out(0 to {{mem.dim_m}}-1);--{% endif %}{% endfor %}
    --{% for ext in ext_insts %}{% if ext.dim == 1 %}
    {{ext.inst_name}} : t_{{ext.interface|lower}}_m2s;--{% elif ext.dim == 2 %}
    {{ext.inst_name}} : t_{{ext.interface|lower}}_m2s_array;--{% endif %}{% endfor %}
  end record;

  -- ===========================================================================
  -- top level component declaration
  -- must come after defining the interfaces
  -- ---------------------------------------------------------------------------
  subtype t_{{type_name_org}}_m2s is t_{{interface|lower}}_m2s;
  subtype t_{{type_name_org}}_s2m is t_{{interface|lower}}_s2m;

  component {{type_name_org}} is
      port (
        pi_clock : in std_logic;
        pi_reset : in std_logic;
        -- TOP subordinate memory mapped interface
        pi_s_top  : in  t_{{type_name_org}}_m2s;
        po_s_top  : out t_{{type_name_org}}_s2m;
        -- to logic interface
        pi_addrmap : in  t_addrmap_{{type_name_org}}_in;
        po_addrmap : out t_addrmap_{{type_name_org}}_out
      );
  end component {{type_name_org}};

end package pkg_{{type_name_org}};
--------------------------------------------------------------------------------
package body pkg_{{type_name_org}} is
end package body;

--==============================================================================
--------------------------------------------------------------------------------
--{% for regtype in reg_types %}
-- register type: {{regtype.type_name}}
-----------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.pkg_{{type_name_org}}.all;

entity {{type_name_org}}_{{regtype.type_name}} is
  port (
    pi_clock        : in  std_logic;
    pi_reset        : in  std_logic;
    -- to/from adapter
    pi_decoder_rd_stb : in  std_logic;
    pi_decoder_wr_stb : in  std_logic;
    pi_decoder_data   : in  std_logic_vector(C_DATA_WIDTH-1 downto 0);
    po_decoder_data   : out std_logic_vector(C_DATA_WIDTH-1 downto 0);

    pi_reg  : in t_reg_{{regtype.type_name}}_in ;
    po_reg  : out t_reg_{{regtype.type_name}}_out
  );
end entity {{type_name_org}}_{{regtype.type_name}};

architecture rtl of {{type_name_org}}_{{regtype.type_name}} is
  signal data_out : std_logic_vector(C_DATA_WIDTH-1 downto 0) := (others => '0');
begin
  -- resize field data out to the register bus width
  -- do only if 1 field and signed--{% if regtype.signed == 1 and regtype.fields_count == 1%}
  po_decoder_data <= std_logic_vector(resize(signed(data_out({{regtype.fields[0].high}} downto {{regtype.fields[0].low}})),C_DATA_WIDTH));--{% else %}
  po_decoder_data <= data_out;--{% endif %}

  ----------------------------------------------------------{% for field in regtype.fields %}{% if field.ftype == "STORAGE" %}
  {{field.type_name}}_storage: block
    signal l_field_reg   : std_logic_vector({{field.width}}-1 downto 0);
    signal l_sw_wr_stb_q : std_logic;
    signal l_sw_rd_stb_q : std_logic;
  begin
    prs_write : process(pi_clock)
    begin
      if rising_edge(pi_clock) then
        if pi_reset = '1' then
          l_field_reg <= std_logic_vector(to_signed({{field.reset}},{{field.width}}));
          l_sw_wr_stb_q <= '0';
          l_sw_rd_stb_q <= '0';
        else
          -- TODO handle software access side effects (rcl/rset, woclr/woset, swacc/swmod)
          --{% if field.node.is_sw_writable %} Writable by software
          if pi_decoder_wr_stb = '1' then
            l_field_reg <= pi_decoder_data({{field.high}} downto {{field.low}});
          end if;
          l_sw_wr_stb_q <= pi_decoder_wr_stb;
          --{% endif %}
          --{% if field.we and field.node.is_hw_writable %} Writable by hardware
          if pi_reg.{{field.type_name}}.we = '1' then
            l_field_reg <= pi_reg.{{field.type_name}}.data;
          end if;
          --{% elif field.node.is_hw_writable %}
          l_field_reg <= pi_reg.{{field.type_name}}.data;
          --{% endif %}
          l_sw_rd_stb_q <= pi_decoder_rd_stb;
        end if;
      end if;
    end process;

    po_reg.{{field.type_name}}.swacc <= (not l_sw_wr_stb_q and pi_decoder_wr_stb) or (not l_sw_rd_stb_q and pi_decoder_rd_stb ) when rising_edge(pi_clock);
    --{% if field.sw == "w" or field.sw == "rw" %}
    po_reg.{{field.type_name}}.swmod <= (not l_sw_wr_stb_q and pi_decoder_wr_stb) when rising_edge(pi_clock);--{% endif %}

    data_out({{field.high}} downto {{field.low}}) <= l_field_reg;

  end block {{field.type_name}}_storage;

  ----------------------------------------------------------
  --{% elif field.ftype == "WIRE" %}
  {{field.type_name}}_wire : block
    signal decoder_rd_stb_q : std_logic;
  begin
    --{% if field.const == 1%}
    data_out({{field.high}} downto {{field.low}}) <= std_logic_vector(to_signed({{field.reset}},{{field.width}}));--{% else %}
    data_out({{field.high}} downto {{field.low}}) <= pi_reg.{{field.type_name}}.data({{field.width}}-1 downto 0);--{% endif %}

    po_reg.{{field.type_name}}.data  <= data_out({{field.high}} downto {{field.low}});
    po_reg.{{field.type_name}}.swmod <= '0';
    po_reg.{{field.type_name}}.swacc <= '1' when pi_decoder_rd_stb = '1' and decoder_rd_stb_q = '0' else '0';
    decoder_rd_stb_q <= pi_decoder_rd_stb when rising_edge(pi_clock);
  end block;--{% endif %}{% endfor %}
end rtl;
-----------------------------------------------{% endfor %}
