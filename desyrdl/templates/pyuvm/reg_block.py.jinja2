from pyuvm import uvm_reg, uvm_reg_field, uvm_reg_map
from pyuvm import uvm_reg_block
from pyuvm import predict_t

# DesyRDL registers are always 32 bits wide
REG_WIDTH=32

# TODO improve newlines
{% for addrmap in addrmaps | reverse %}
# this is addrmap {{addrmap.inst_name}}
  {% if addrmap.dim  == 1 -%}
  {% for inst in addrmap.insts %}
    {% if inst.node_type == "REG" %}
class REG_{{inst.inst_name | upper}}(uvm_reg):
    def __init__(self, name="{{inst.inst_name | upper}}", reg_width=REG_WIDTH):
        super().__init__(name, reg_width)
      {% for field in inst.fields %}
        self.{{field.inst_name}} = uvm_reg_field("{{field.type_name}}")
      {%- endfor %}

    def build(self):
      {# See documentation for the pyuvm.s19_uvm_reg_field module #}
      {%- for field in inst.fields -%}
        {# for the access policy, see documentation on uvm_reg_field.set_access #}
        self.{{field.inst_name}}.configure(self, {{field.width}}, {{field.low}}, "{{field.rw}}", {{field.volatile}}, {{field.reset}})
      {%- endfor %}
        self._set_lock()
        self.set_prediction(predict_t.PREDICT_DIRECT)
    {%- endif %}
  {%- endfor %}
  {%- endif %}

class REG_BLOCK_{{addrmap.inst_name | upper}}(uvm_reg_block):
    def __init__(self, name="REG_BLOCK_{{addrmap.inst_name | upper}}"):
        super().__init__(name)
        self.def_map = uvm_reg_map('map')
        {# see documentation on pyuvm.s21_uvm_reg_map module #}
        {# TODO here it should be set to the address within the hierarchy #}
        self.def_map.configure(self, 0)
  {% for inst in addrmap.insts %}
    {% if inst.node_type == "REG" %}
        self.{{inst.inst_name | upper}} = REG_{{inst.inst_name | upper}}("{{inst.inst_name | upper}}")
        {# TODO check if this works in a hierarchy. Currently the absolute address is used (good?) and the current REG_BLOCK is the parent (good?). #}
        {# See documentation for the pyuvm.s20_uvm_reg module #}
        self.{{inst.inst_name | upper}}.configure(self, "0x{{inst.absolute_address | int(base=16)}}", "", False, False)
        {# see documentation on pyuvm.s21_uvm_reg_map module #}
        self.def_map.add_reg(self.{{inst.inst_name | upper}}, "0x{{inst.absolute_address | int(base=16)}}", "{{inst.rw}}")
    {%- endif %}
  {%- endfor %}
{%- endfor %}

